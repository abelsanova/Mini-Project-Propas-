# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SudutjarakDialog
                                 A QGIS plugin
 Merupakan plugin yang digunakan untuk melakukan plottingan titik dan garis dengan menggunakan data nilai berupa nilai azimuth dan nilai jarak. 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-04-24
        git sha              : $Format:%H$
        copyright            : (C) 2023 by (c) Kelompok 5_B
        email                : abel.sanova.haspi@mail.ugm.ac.id
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

# Melakukan Import Seluruh Modul yang Akan Membantu Pembuatan Plugin
import os
import math

from qgis.core import QgsRectangle
from qgis.core import Qgis
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtWidgets import QTableWidgetItem, QDialog

from qgis.core import QgsVectorLayer, QgsProject, QgsFeature, QgsGeometry, QgsPointXY, QgsPoint
from qgis.utils import iface

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'sudut_jarak_dialog_base.ui'))


class SudutjarakDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(SudutjarakDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        # Melakukan Pendefinisian Antarmuka
        self.iface = iface

        # Menghubungkan tombol "PLOT!" Agar Terintegrasi dengan Sistem
        self.push_ok_2.clicked.connect(self.plotting)

        # Menghubungkan tombol "Atur Ulang" Agar Terintegrasi dengan Sistem
        self.atur_ulang_ok.clicked.connect(self.atur_ulang)

    # Mengosongkan Data yang Sudah Diisi Sebelumnya pada Kolom Interface
    def atur_ulang(self):
        self.input_x_2.setText("")
        self.input_y_2.setText("")
        self.input_az_2.setText("")
        self.input_jarak_2.setText("")
        self.spinBox_2.setValue(0)
        self.checkBox_2.setChecked(False)
        root = QgsProject.instance().layerTreeRoot()
        layers = root.children()

        for layer in layers:
            QgsProject.instance().removeMapLayer(layer.layerId())

        # Melakukan pemuatan ulang tampilan yang ditampilkan pada QGIS
        canvas = iface.mapCanvas()
        canvas.setExtent(QgsRectangle(-180, -90, 180, 90))
        canvas.refresh()

    # Mendefinisikan Gambar Plottingan
    def plotting(self):
        """ Melakukan Rangkaian Program Ketika Tombol Ditekan """
        # Melakukan Pemanggilan Line Edit untuk NIlai X dan Y
        # Melakukan Penyimpanan Angka dari Variabel
        try:
            x = float(self.input_x_2.text())
            y = float(self.input_y_2.text())

            # PENYELESAIAN POTENSI PERMASALAHAN (5)
            # Apabila Pengguna Memasukkan Nilai X dan Y Terbalik
            if (x > y):
                raise Exception(iface.messageBar().pushMessage("OOPS!!",'Nilai X dan Y yang Anda Masukkan Terbalik!', level=Qgis.Warning))

            # Melakukan Pemanggilan Fungsi
            self.plot_point(x, y)

        # PENYELESAIAN POTENSI PERMASALAHAN (1)
        # Apabila Pengguna Memasukkan Huruf Bukan Angka
        except Exception as e:
            print(e, iface.messageBar().pushMessage("OOPS!!", "Ada Kesalahan!", level=Qgis.Warning, duration=3))

    # Pendefinisian Titik Masukkan
    def plot_point(self, x, y):
        """ Melakukan Plottingan Titik Sesuai Koordinat Masukan """

        # PENYELESAIAN POTENSI PERMASALAHAN (2)
        # Pengguna Dapat Merubah Sendiri Sistem Proyeksi
        zone = str(self.comboBox_2.currentText())
        zonetitik = "Point?crs=" + zone

        # Pembuatan Layer Titik pada Memory
        layer = QgsVectorLayer(zonetitik, "Plot Titik", "memory")
        QgsProject.instance().addMapLayer(layer)

        # Pembuatan Layer Garis Pada Memory
        # (Hanya diberlakukan apabila pengguna ingin membuat garis)
        if self.checkBox_2.isChecked():
            # Pengaturan Sistem Proyeksi
            zonegaris = "LineString?crs=" + zone
            # Pembuatan Layer Garis pada Memory
            layer_line = QgsVectorLayer(zonegaris, "Plot Garis", "memory")
            QgsProject.instance().addMapLayers([layer_line])

        # Geometri Fitur Titik Baru
        feature = QgsFeature()
        feature.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(x, y)))

        # Fitur Titik pada Layer
        layer.dataProvider().addFeatures([feature])
        layer.updateExtents()

        # Pengaturan Jarak
        jarak = float(self.input_jarak_2.text())

        # PENYELESAIAN POTENSI PERMASALAHAN (4.a)
        # Jarak yang Diinput Pengguna Melebihi Kelengkungan Bumi
        if jarak > 13500:
            raise Exception(
                iface.messageBar().pushMessage("OOPS!!", 'Nilai Jarak Tidak Boleh Melebihi Batas Kelengkungan Bumi!',level=Qgis.Warning))

        # PENYELESAIAN POTENSI PERMASALAHAN (4.b)
        # Jarak yang Diinput Pengguna Negatif
        if jarak < 0:
            raise Exception(
                iface.messageBar().pushMessage("OOPS!!", 'Nilai Jarak Tidak Boleh Bernilai Negatif!', level=Qgis.Warning))

        # Pengaturan Azimuth
        az = math.radians(float(self.input_az_2.text()))

        # PENYELESAIAN POTENSI PERMASALAHAN (3.b)
        # Azimuth yang Diinput Pengguna Lebih dari 360
        if (az < 0):
            raise Exception(
                iface.messageBar().pushMessage("OOPS!!", 'Nilai Azimuth Tidak Boleh Bernilai Negatif!', level=Qgis.Warning))

        # PENYELESAIAN POTENSI PERMASALAHAN (3.a)
        # Azimuth yang Diinput Pengguna Lebih dari 360
        while (az > 360):
            az -= 360

        # PENYELESAIAN POTENSI PERMASALAHAN (6 & 7)
        # Melakukan Plotting Azimuth dan Jarak Secara Terus Menerus
        jumlahlooping = int(self.spinBox_2.text())

        # Bila Variabel = 0, Maka Looping Tidak Akan Berjalan
        while (jumlahlooping > 0):

            # Perubahan Nilai X dan Y Saat Looping
            x += (jarak * math.sin(az))
            y += (jarak * math.cos(az))

            # Geometri Fitur Titik Baru
            feature = QgsFeature()
            feature.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(x, y)))

            # Fitur Titik pada Layer
            layer.dataProvider().addFeatures([feature])
            layer.updateExtents()

            # Pengurangan Variabel Looping Setiap Sudah Melakukan Looping
            jumlahlooping -= 1

            # Penggambaran Garis
            # (Hanya diberlakukan apabila pengguna ingin membuat garis)
            if self.checkBox_2.isChecked():
                # Pendefinisian Garis
                line_start = QgsPoint((x - (jarak * math.sin(az))), (y - (jarak * math.cos(az))))
                line_end = QgsPoint(x, y)
                line = QgsGeometry.fromPolyline([line_start, line_end])

                # Pemberian Geometri pada Garis Baru
                feature_line = QgsFeature()
                feature_line.setGeometry(QgsGeometry.fromPolyline([line_start, line_end]))

                # Penambahan Fitur garus pada Layer
                layer_line.dataProvider().addFeatures([feature_line])
                layer_line.updateExtents()

        # Melakukan Zoom pada Bagian Layer yang Sudah Dilakukan Plotting
        self.iface.zoomToActiveLayer()
